{"mappings":"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","sources":["src/games/tower-def/index.ts","src/games/tower-def/classes/Mob.ts","src/games/tower-def/classes/Path.ts","src/games/tower-def/classes/Segment.ts","src/games/tower-def/maps/default.ts"],"sourcesContent":["import { THREE } from \"../../utilities/three\"\nimport { Mob } from \"./classes/Mob\"\nimport { Path } from \"./classes/Path\"\nimport { Segment } from \"./classes/Segment\"\nimport map from \"./maps/default\"\n\nexport default () => {\n  const paths = map.paths.map(\n    (pathConfig) =>\n      new Path(\n        pathConfig.segments.map((waypoints) =>\n          waypoints.map(([x, y]) => new Segment(x, y))\n        )\n      )\n  )\n\n  const scene = new THREE.Scene()\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000\n  )\n\n  camera.position.z = 25\n  camera.position.y = -8\n  camera.rotation.x = Math.PI * 0.2\n\n  const renderer = new THREE.WebGLRenderer()\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  const canvas = renderer.domElement\n  document.body.appendChild(canvas)\n\n  const mobs: Mob[] = []\n\n  paths.forEach((path) => {\n    for (var i = 0; i < 40; i++) {\n      const mob = new Mob(path)\n      scene.add(mob.mesh)\n      mobs.push(mob)\n    }\n\n    path.forEach((s) => scene.add(s.mesh))\n  })\n\n  const clock = new THREE.Clock()\n\n  function animate() {\n    requestAnimationFrame(animate)\n    if (\n      canvas.width !== canvas.clientWidth ||\n      canvas.height !== canvas.clientHeight\n    ) {\n      // This stuff in here is just for auto-resizing.\n      renderer.setSize(canvas.clientWidth, canvas.clientHeight, false)\n      camera.aspect = canvas.clientWidth / canvas.clientHeight\n      camera.updateProjectionMatrix()\n    }\n\n    // Apply matrix like this to rotate the camera.\n    const es = clock.getElapsedTime() * 0.1 * Math.PI\n    camera.position.set(Math.cos(es) * 10, -10 + Math.sin(es) * 10, 25)\n\n    // Make camera look at the box.\n    camera.lookAt(0, 0, 0)\n\n    renderer.render(scene, camera)\n    paths.forEach((path) => path.update())\n    mobs.forEach((mob) => mob.update())\n  }\n  animate()\n}\n","import { random } from \"../../../utilities/math\"\nimport { Segment } from \"./Segment\"\nimport { THREE } from \"../../../utilities/three\"\nimport { Path } from \"./Path\"\n\nconst geometry = new THREE.BoxGeometry()\n\nconst MINSPD = 0.05\nconst MAXSPD = 0.1\n\nexport class Mob {\n  private speed = random(MINSPD, MAXSPD, true)\n  public target?: Segment\n  public targetIndex = 0\n  public mesh: THREE.Mesh\n  constructor(public path: Path, public x = 0, public y = 0) {\n    const amountOfRed = Math.round((this.speed / MAXSPD) * 255)\n    const amountOfGreen = Math.round(255 - amountOfRed / 2)\n    const material = new THREE.MeshBasicMaterial({\n      color: `rgba(${amountOfRed}, ${amountOfGreen}, 0)`,\n      opacity: 0.2,\n    })\n    this.mesh = new THREE.Mesh(geometry, material)\n    this.mesh.scale.set(0.3, 0.3, 0.3)\n    this.mesh.position.set(this.x, this.y, 0)\n  }\n\n  update() {\n    if (!this.target) {\n      this.targetIndex = 0\n      this.changeTarget()\n    }\n    if (this.target) {\n      const { x, y } = this.target\n      if (x < this.x) this.x -= this.speed\n      if (x > this.x) this.x += this.speed\n      if (y < this.y) this.y -= this.speed\n      if (y > this.y) this.y += this.speed\n\n      if (this.target.isInRange(this.mesh, this.speed * 1.5)) {\n        this.changeTarget()\n      }\n    }\n    this.mesh.position.set(this.x, this.y, 0)\n    this.mesh.rotation.x += this.speed\n    this.mesh.rotation.y += this.speed\n  }\n\n  private changeTarget() {\n    this.target = this.path.getNext(this.targetIndex++)\n    if (!this.target) {\n      this.targetIndex = 0\n      this.target = this.path.getNext(this.targetIndex++)\n    }\n  }\n}\n","import { random } from \"../../../utilities/math\"\nimport { Segment } from \"./Segment\"\n\nexport class Path {\n  constructor(public segments: Segment[][] = []) {}\n\n  public getNext(index: number) {\n    const nextSegments = this.segments[index]\n    if (!nextSegments) return null\n    return nextSegments[random(nextSegments.length - 1)]\n  }\n\n  public forEach(cb: (Segment) => void) {\n    this.segments.forEach((segments) => segments.forEach(cb))\n  }\n\n  public update() {\n    this.forEach((seg) => seg.update())\n  }\n}\n","import { THREE } from \"../../../utilities/three\"\n\nconst geometry = new THREE.RingGeometry()\nconst material = new THREE.MeshBasicMaterial({\n  color: 0x0088ff,\n  opacity: 0.5,\n})\n\nexport class Segment {\n  public mesh: THREE.Mesh\n  private clock = new THREE.Clock()\n\n  constructor(public x: number, public y: number) {\n    this.mesh = new THREE.Mesh(geometry, material)\n    this.mesh.scale.set(0.2, 0.2, 0.02)\n    this.mesh.position.x = x\n    this.mesh.position.y = y\n  }\n\n  public isInRange(mesh: THREE.Mesh, range = 0.1) {\n    if (!mesh?.position) return false\n    return mesh.position.distanceTo(this.mesh.position) < range\n  }\n\n  update() {\n    this.mesh.rotateZ(2)\n    this.mesh.scale.y = 0.2 + Math.sin(this.clock.getElapsedTime() * 10) * 0.02\n  }\n}\n","export default {\n  paths: [\n    {\n      spawns: [\"monsterA\", \"monsterB\"],\n      segments: [\n        [[-4, 0]],\n        [\n          [-3, -2],\n          [-2, 2],\n          [-1, -2],\n        ],\n        [[-1, -2]],\n        [\n          [0, 1],\n          [0, 0],\n        ],\n        [[3, 2]],\n        [[7, 3]],\n        [[3, 4]],\n        [[8, 5]],\n        [[3, 6]],\n      ] as [number, number][][],\n    },\n    {\n      spawns: [\"monsterA\", \"monsterB\"],\n      segments: [\n        [[-14, 0]],\n        [\n          [-13, -2],\n          [-12, 2],\n          [-11, -2],\n        ],\n        [[-11, -2]],\n        [\n          [10, 11],\n          [10, 10],\n        ],\n        [[13, 12]],\n        [[17, 13]],\n        [[13, 14]],\n        [[18, 15]],\n        [[13, 16]],\n      ] as [number, number][][],\n    },\n  ],\n}\n"],"names":["$V3qFZ","parcelRequire","$01d8d17ae946dbb7$export$2e2bcd8739ae039","paths","$anjX6","default","map","pathConfig","$2rTii","Path","segments","waypoints","x","y","$jpCoW","Segment","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","rotation","Math","PI","renderer","WebGLRenderer","setSize","canvas","domElement","document","body","appendChild","mobs","forEach","path","i","mob","$dOAou","Mob","add","mesh","push","s","clock","Clock","animate","requestAnimationFrame","width","clientWidth","height","clientHeight","aspect","updateProjectionMatrix","es","getElapsedTime","set","cos","sin","lookAt","render","update","$9COFO","$7c1760993c9e35dd$var$geometry","BoxGeometry","$7c1760993c9e35dd$export$acd1b67b03820565","constructor","speed","random","targetIndex","amountOfRed","round","this","amountOfGreen","material","MeshBasicMaterial","color","opacity","Mesh","scale","target","changeTarget","isInRange","getNext","$3f78a8364bd8945d$export$4b2950bdac9b6ee9","index","nextSegments","length","cb","seg","$e9913353ded20a1c$var$geometry","RingGeometry","$e9913353ded20a1c$var$material","$e9913353ded20a1c$export$d53aa5c5ab432700","range","distanceTo","rotateZ","$4034bacaf635d61d$export$2e2bcd8739ae039","spawns"],"version":3,"file":"tower-def.4cdb6e2a.js.map"}