{"mappings":"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","sources":["src/games/space-shield/index.ts","src/games/space-shield/classes/Mob.ts","node_modules/@parcel/runtime-js/lib/runtime-091d9cbd06bcfa22.js","node_modules/@parcel/runtime-js/lib/runtime-6e969b3e8843d1f5.js","node_modules/@parcel/runtime-js/lib/runtime-f3020f49151f772e.js","node_modules/@parcel/runtime-js/lib/runtime-3f05b8b31a52b6ab.js"],"sourcesContent":["import { MixOperation } from \"three\"\nimport { random } from \"../../utilities/math\"\nimport { Mob } from \"./classes/Mob\"\n\nexport default async () => {\n  const { THREE } = await import(\"../../utilities/three\")\n  const { Cameraman } = await import(\"../../utilities/three/Cameraman\")\n  const { GameLoop } = await import(\"../../utilities/three/GameLoop\")\n  const { Central } = await import(\"./classes/Central\")\n  const { GamePad } = await import(\"../../utilities/inputs/Gamepad\")\n\n  const scene = new THREE.Scene()\n  const cameraman = new Cameraman(scene, 0, 10, 0)\n  const controls = new Map()\n  controls.set(\"KeyW\", \"KeyUp\")\n  controls.set(\"KeyW\", \"KeyUp\")\n  controls.set(\"KeyW\", \"KeyUp\")\n  for (let n = 0; n < 10; n++) {\n    controls.set(`spawn${n}`, `Digit${n}`)\n  }\n  const pad = new GamePad(controls)\n\n  const central = new Central()\n  scene.add(central.mesh)\n  const mobs: Mob[] = []\n\n  const loop = new GameLoop()\n  loop.play((es, dt) => {\n    central.update(dt)\n    cameraman.update(dt)\n    checkSpawner(es, dt)\n    let i = 0\n    while (i < mobs.length) {\n      const mob = mobs[i]\n      mob.update(es)\n      if (mob.hp <= 0) {\n        scene.remove(mob.mesh)\n        mobs.splice(i, 1)\n      } else {\n        i++\n      }\n    }\n  })\n\n  function checkSpawner(es = 0, dt = 0) {\n    for (let n = 0; n < 10; n++) {\n      if (pad.once(`spawn${n}`) || true || !random(100)) {\n        // console.log(`spawning mob #${n}`)\n        const distance = 6\n        const a = random(Math.PI * 2, 0, true)\n        const x = Math.cos(a) * distance\n        const z = Math.sin(a) * distance\n        const hue = (n * Math.PI * 0.2) / 10\n        const mob = new Mob(x, z)\n        mob.hp = 3 * n\n        mob.speed = 0.011 - 0.001 * (n + 1)\n        mobs.push(mob)\n        mob.target = central\n        mob.material.color.setHSL(hue, 1, 0.5)\n        scene.add(mob.mesh)\n      }\n    }\n  }\n}\n","import { THREE } from \"../../../utilities/three\"\nimport { Central } from \"./Central\"\n\nconst geometry = new THREE.BoxGeometry()\nconst V = THREE.Vector3\n\nexport class Mob {\n  public targetIndex = 0\n  public mesh: THREE.Mesh\n  public speed = 0.01\n  public target: Central | null = null\n  public material: THREE.MeshBasicMaterial\n  public v: THREE.Vector3 = new V(0, 0, 0)\n  public hp = 100\n  constructor(public x = 0, public z = 0) {\n    this.material = new THREE.MeshBasicMaterial()\n    this.mesh = new THREE.Mesh(geometry, this.material)\n    this.mesh.scale.set(0.3, 0.3, 0.3)\n    this.mesh.position.set(this.x, 0, this.z)\n  }\n\n  update(es: number) {\n    if (this.target) {\n      const distance = this.mesh.position.distanceTo(this.target.mesh.position)\n      if (distance > 1) {\n        this.mesh.lookAt(this.target.mesh.position)\n        this.mesh.translateZ(Math.min((distance / 10000) * es, this.speed * es))\n      } else {\n        this.hp -= 1\n      }\n    }\n  }\n}\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"dSnCt\"))).then(() => parcelRequire('dXE66'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"BFxin\"))).then(() => parcelRequire('eEoiV'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"kHfYY\"))).then(() => parcelRequire('eQDoK'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"3tNgy\"))).then(() => parcelRequire('5yHw8'));"],"names":["$9COFO","parcelRequire","$2737bd0e7a1f8365$export$2e2bcd8739ae039","async","THREE","Promise","resolve","Cameraman","GameLoop","Central","GamePad","scene","Scene","cameraman","controls","Map","set","n1","pad","central","add","mesh","mobs","play","es","dt","update","n","once","distance","a","random","Math","PI","x","cos","z","sin","hue","mob","$axbXC","Mob","hp","speed","push","target","material","color","setHSL","checkSpawner","i","length","remove","splice","$V3qFZ","$a9d1c333d5c327f0$var$geometry","BoxGeometry","$a9d1c333d5c327f0$var$V","Vector3","$a9d1c333d5c327f0$export$acd1b67b03820565","constructor","targetIndex","v","this","MeshBasicMaterial","Mesh","scale","position","distanceTo","lookAt","translateZ","min","module","exports","import","then"],"version":3,"file":"space-shield.f4c2309d.js.map"}