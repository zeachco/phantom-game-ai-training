{"mappings":"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","sources":["src/games/ping-pong/index.ts","src/games/ping-pong/Ball.ts","src/games/ping-pong/CollisionBox.ts"],"sourcesContent":["import { Ball } from \"./Ball\"\nimport { CollisionBox } from \"./CollisionBox\"\n\nexport default () => {\n  var canvas = document.createElement(\"canvas\")\n  document.body.appendChild(canvas)\n  var ctx = canvas.getContext(\"2d\")\n\n  var GW = (canvas.width = 800)\n  var GH = (canvas.height = 600)\n\n  const leftPlayer = new CollisionBox(50, 150, 20, 140)\n  const rightPlayer = new CollisionBox(GW - 50, 150, 20, 140)\n\n  const allBoxes: CollisionBox[] = [leftPlayer, rightPlayer]\n  const allBalls: Ball[] = []\n\n  for (var i = 0; i < 5; i++) {\n    const x = (Math.random() * GW) / 2 + GW / 4\n    const y = Math.random() * GH\n    const area = Math.random() * 150\n    allBoxes.push(new CollisionBox(x, y, 5 + area, 5 + (150 - area)))\n    allBalls.push(new Ball(GW / 2, GH / 2, 25))\n  }\n\n  renderGame()\n\n  function renderGame() {\n    requestAnimationFrame(renderGame)\n    // ctx.clearRect(0, 0, GW, GH)\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.1)\"\n    ctx.fillRect(0, 0, GW, GH)\n\n    // desiner les obstacles\n    allBoxes.forEach((box) => {\n      box.render(ctx)\n      // box.getCollitionNormal(ball.x, ball.y, ball.size)\n\n      // if (ballX < 0 + ballSize / 2) ballVX = Math.abs(ballVX * ballAcc) // left\n      // if (ballY < 0 + ballSize / 2) ballVY = Math.abs(ballVY * ballAcc) // top\n      // if (ballX > GW - ballSize / 2) ballVX = -Math.abs(ballVX * ballAcc) // right\n      // if (ballY > GH - ballSize / 2) ballVY = -Math.abs(ballVY * ballAcc) // bottom\n    })\n\n    allBalls.forEach((ball) => {\n      leftPlayer.y = ball.y\n      rightPlayer.y = ball.y\n\n      allBoxes.forEach((box) => box.getCollitionNormal(ball))\n\n      if (ball.x < 0 + ball.size / 2) ball.vx = Math.abs(ball.vx * ball.acc) // left: ;\n      if (ball.y < 0 + ball.size / 2) ball.vy = Math.abs(ball.vy * ball.acc) // top\n      if (ball.x > GW - ball.size / 2) ball.vx = -Math.abs(ball.vx * ball.acc) // right\n      if (ball.y > GH - ball.size / 2) ball.vy = -Math.abs(ball.vy * ball.acc) // bottom\n      ball.render(ctx)\n    })\n  }\n}","export class Ball {\n  public vx: number\n  public vy: number\n  public acc = 1.001\n\n  constructor(public x: number, public y: number, public size: number) {\n    const angle = Math.random() * Math.PI * 2\n    const speed = Math.random() * 3 + 2\n    this.vx = Math.cos(angle) * speed\n    this.vy = Math.sin(angle) * speed\n  }\n\n  render(ctx: CanvasRenderingContext2D) {\n    this.x += this.vx\n    this.y += this.vy\n\n    ctx.fillStyle = \"#ff000088\"\n    ctx.beginPath()\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)\n    ctx.fill()\n    ctx.stroke()\n  }\n}\n","import { Ball } from \"./Ball\"\n\nexport class CollisionBox {\n  private collided = false\n\n  constructor(\n    public x: number,\n    public y: number,\n    public width: number,\n    public height: number\n  ) {}\n\n  render(ctx) {\n    ctx.fillStyle = this.collided ? \"#ff0000\" : \"#0000ff\"\n    ctx.fillRect(\n      this.x - this.width / 2,\n      this.y - this.height / 2,\n      this.width,\n      this.height\n    )\n  }\n\n  getCollitionNormal(ball: Ball) {\n    var w = this.width / 2\n    var h = this.height / 2\n    var s = ball.size / 2\n\n    // collide\n    const offsetX = ball.x - this.x\n    const offsetY = ball.y - this.y\n\n    const left = offsetX > -w - s\n    const top = offsetX > -h - s\n    const right = offsetX < w + s\n    const bot = offsetX < -h + s\n\n    // console.log({ left, right, top, bot })\n    this.collided = left && right && top && bot\n  }\n}\n"],"names":["$5aEfW","parcelRequire","$5bd6c2134b3c4895$export$2e2bcd8739ae039","canvas","document","createElement","body","appendChild","ctx","getContext","GW","width","GH","height","leftPlayer","$6dKm5","CollisionBox","rightPlayer","allBoxes","allBalls","i","x","Math","random","y","area","push","Ball","renderGame","requestAnimationFrame","fillStyle","fillRect","forEach","box","render","ball","getCollitionNormal","size","vx","abs","acc","vy","$5a76630fedfe8409$export$a83d7c3fa53790c9","constructor","angle","PI","speed","this","cos","sin","beginPath","arc","fill","stroke","$e6cde18581d4780d$export$1a635428e9f8e01a","collided","w","h","s","offsetX","left","top","right","bot"],"version":3,"file":"ping-pong.bfbdb4d6.js.map"}