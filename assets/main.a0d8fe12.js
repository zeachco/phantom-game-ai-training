import{c as O}from"./dom.be162d4e.js";import{GamePad as R}from"./Gamepad.8a108b30.js";import{l as A,r as I,b as $,v as _}from"./three.module.f7a5d9ae.js";import{GameLoop as B}from"./GameLoop.4f365e9c.js";const p=3,v=Array(p).fill(0).map((t,s)=>A(0,360,(s+1)/p));function b(t,s){const i=t+s;return i>p-1?0:i<0?p-1:i}class D{constructor(s){this.weight=0,this.bias=0,Object.assign(this,s)}}class k{constructor(s,i=1,e=[5],r=0,o=0){this.inputs=s,this.outputs=i,this.hiddenLayers=e,this.generation=r,this.mutationAmount=o,this.layers=[],this.score=0,this.layers=[s,...e,i].map(n=>new Array(n).fill(0).map(()=>new D({bias:0,weight:0}))),this.randomize(1)}loadFromFile(s){const i=localStorage.getItem(s),e=JSON.parse(i);return this.fromObject(e),e}saveToFile(s){localStorage.setItem(s,this.toJSON())}fromObject(s){Object.assign(this,s)}toJSON(){const s={score:this.score,generation:this.generation,layers:this.layers};return JSON.stringify(s,null,2)}train(s,i=1e3){const e=[];for(let r=1;r<=i;r++){const[o,n]=s(),y=this.clone(r/i),h=this.feedForward(o),g=n.reduce((f,c)=>f+Math.abs(n[c]-h[c]),0);console.log({inputs:o,expected:n,results:h,distance:g}),e.push({network:y,mutation:y.mutationAmount,distance:g})}return e.sort((r,o)=>r.distance-o.distance),console.table(e.map(r=>r.distance)),e}clone(s=this.mutationAmount){return new k(this.inputs,this.outputs,this.hiddenLayers,this.generation+1,s)}feedForward(s,i=0){const e=this.layers[i];if(!e)return s;const r=e.map(o=>s.reduce((n,y)=>{const h=o.weight*y;return h>o.bias?h:n},0));return this.feedForward(r,i+1)}randomize(s=this.mutationAmount){for(let i=0;i<this.layers.length;i++){const e=this.layers[i];for(let r=0;r<e.length;r++){const o=e[r];o.bias=A(o.bias,I(-1,1),s),o.weight=A(o.weight,I(-1,1),s)}}}}const w=class{constructor(t={}){this.faction=$(0,p-1),this.label=this.faction+"",this.x=0,this.y=0,this.vx=0,this.vy=0,this.a=0,this.va=0,this.s=0,this.focused=!1,this.dead=!1,this.others=[],this.energy=100,this.atk=0,this.vatk=0,this.brain=new k(w.MAX_NB*2,3,[]),Object.assign(this,t)}forward(){this.vx+=Math.cos(this.a),this.vy+=Math.sin(this.a),this.brain.score-=.01}turnLeft(){this.va-=Math.min(.05,1/this.radius)}turnRight(){this.va+=Math.min(.05,1/this.radius)}get radius(){return w.RADIUS+this.energy/100}update(){this.s*=.99,this.va*=.7,this.vx*=.9,this.vy*=.9,this.vatk*=.9,this.atk=(this.atk+this.vatk)*.7,!this.dead&&(this.energy-=this.s/50,this.energy-=this.va/100,this.x+=this.vx,this.y+=this.vy,this.a+=this.va,this.a>Math.PI&&(this.a-=Math.PI*2),this.a<-Math.PI&&(this.a+=Math.PI*2),this.brain.score<-5&&(this.dead=!0))}updateTargets(t){if(this.others=[],!this.dead){for(let s=0;s<t.length;s++){const i=t[s];if(i.dead||i.faction===this.faction)continue;const e=_(this.x-i.x,this.y-i.y);let r=0;const o=b(this.faction,1)===i.faction,n=b(this.faction,-1)===i.faction;o&&r--,n&&r++,e<this.radius+i.radius&&(b(this.faction,1)===i.faction&&(this.brain.score-=25),b(this.faction,-1)===i.faction&&(this.brain.score+=25)),this.others.push({ref:i,distance:e,opportunity:r})}this.others.sort((s,i)=>s.distance-i.distance)}}draw(t){this.focused&&this.drawRelations(t),this.drawBody(t),this.drawScore(t)}drawBody(t){const s=(this.focused,1),i=b(this.faction,-1);t.lineWidth=1,t.strokeStyle=`hsla(${v[i]}, 100%, 70%, ${s})`,t.fillStyle=`hsla(${v[this.faction]}, 100%, 70%, ${s})`,t.save(),t.translate(this.x,this.y),t.rotate(this.a),t.beginPath(),t.moveTo(0,0),t.arc(0,0,this.radius,0,Math.PI*2),t.lineTo(0,0),t.stroke(),t.fill(),t.beginPath(),t.strokeStyle=`hsla(${v[i]}, 100%, 80%, ${s})`,t.fillStyle=`hsla(${v[i]}, 100%, 20%, ${s})`,t.lineTo(0,0),t.lineTo(this.radius+5,0),t.stroke(),t.fill(),t.restore()}drawRelations(t){t.setLineDash([7,3]),t.lineWidth=2,this.others.slice(0,w.TRACK_NB).forEach((s,i)=>{const e=1/(1+i);switch(t.beginPath(),t.strokeStyle=`rgba(255, 128, 0, ${e})`,s.opportunity){case-1:t.strokeStyle=`rgba(255, 128, 0, ${e})`;case 1:t.strokeStyle=`rgba(0, 255, 0, ${e})`;case 0:t.strokeStyle=`rgba(200, 200, 200, ${e})`}t.moveTo(this.x,this.y),t.strokeStyle=`rgba(0, 128, 0, ${e})`,t.lineTo(s.ref.x,s.ref.y),t.stroke(),t.fillStyle="white",t.fillText(`${s.opportunity}`,this.x,this.y+30)}),t.setLineDash([])}drawScore(t){t.fillStyle="white",t.textAlign="center",t.textBaseline="middle";const s=this.y>w.RADIUS*5?this.y-w.RADIUS*2:this.y+w.RADIUS*2;t.fillText(`${this.label} ${this.brain.score.toFixed()}`,this.x,s)}};let u=w;u.TRACK_NB=3;u.RADIUS=10;u.MAX_NB=20;const j=async()=>{new R;const t=O(),s=t.getContext("2d");if(!s)throw new Error("no 2d context");const i=t.width=window.innerWidth,e=t.height=window.innerHeight,r=new B;let o=[],n=o[0];const y=new u;y.brain.loadFromFile("top");let h=y.brain.score||0;for(let f=0;f<p-1;f++)for(let c=0;c<u.MAX_NB;c++)o.push();r.play((f,c)=>{t.width=window.innerWidth,t.height=window.innerHeight;const m=new Array(p).fill(0);if(o.forEach((a,d)=>{a.focused=d===0,m[a.faction]++,g(a),a.update(),a.x>i&&(a.x=0),a.x<0&&(a.x=i),a.y>e&&(a.y=0),a.y<0&&(a.y=e)}),m.forEach((a,d)=>{if(a<u.MAX_NB){const l=o.find(P=>P.faction===d),T=(l==null?void 0:l.x)||$(0,i),F=(l==null?void 0:l.y)||$(0,e),N=(l==null?void 0:l.a)||I(-Math.PI,Math.PI),S=new u({x:T,y:F,a:N,energy:100,faction:d});S.brain.loadFromFile("top"),S.brain.randomize(a/u.MAX_NB/h),S.brain.score=0,o.push(S)}}),o.forEach(a=>a.updateTargets(o)),o.forEach(a=>a.draw(s)),o=o.filter(a=>!a.dead),n=o.concat().sort((a,d)=>d.brain.score-a.brain.score)[0],n&&n.brain.score>h){const a=n.brain.score;console.log(`New score: ${h} > ${a.toFixed()} (+${(a-h).toFixed(3)})`),h=a,n.brain.saveToFile("top")}});function g(f){const c=[];f.others.forEach(d=>{c.push(d.distance),c.push(d.opportunity)});const[m,M,a]=f.brain.feedForward(c);m&&f.forward(),M&&f.turnLeft(),a&&f.turnRight()}};export{j as default};
