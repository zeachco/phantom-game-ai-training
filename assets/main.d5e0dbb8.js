import{c as O}from"./dom.be162d4e.js";import{GamePad as R}from"./Gamepad.8a108b30.js";import{l as I,r as T,b as F,v as _}from"./three.module.f7a5d9ae.js";import{GameLoop as B}from"./GameLoop.4f365e9c.js";const p=3,S=Array(p).fill(0).map((t,i)=>I(0,360,(i+1)/p));function m(t,i){const s=t+i;return s>p-1?0:s<0?p-1:s}class D{constructor(i){this.weight=0,this.bias=0,Object.assign(this,i)}}class M{constructor(i,s=1,o=[5],n=0,a=0){this.inputs=i,this.outputs=s,this.hiddenLayers=o,this.generation=n,this.mutationAmount=a,this.layers=[],this.score=0,this.layers=[i,...o,s].map(r=>new Array(r).fill(0).map(()=>new D({bias:0,weight:0}))),this.randomize(1)}loadFromFile(i){const s=localStorage.getItem(i),o=JSON.parse(s);return this.fromObject(o),o}saveToFile(i){localStorage.setItem(i,this.toJSON())}fromObject(i){Object.assign(this,i)}toJSON(){const i={score:this.score,generation:this.generation,layers:this.layers};return JSON.stringify(i,null,2)}train(i,s=1e3){const o=[];for(let n=1;n<=s;n++){const[a,r]=i(),l=this.clone(n/s),h=this.feedForward(a),g=r.reduce((f,y)=>f+Math.abs(r[y]-h[y]),0);console.log({inputs:a,expected:r,results:h,distance:g}),o.push({network:l,mutation:l.mutationAmount,distance:g})}return o.sort((n,a)=>n.distance-a.distance),console.table(o.map(n=>n.distance)),o}clone(i=this.mutationAmount){return new M(this.inputs,this.outputs,this.hiddenLayers,this.generation+1,i)}feedForward(i,s=0){const o=this.layers[s];if(!o)return i;const n=o.map(a=>i.reduce((r,l)=>{const h=a.weight*l;return h>a.bias?h:r},0));return this.feedForward(n,s+1)}randomize(i=this.mutationAmount){for(let s=0;s<this.layers.length;s++){const o=this.layers[s];for(let n=0;n<o.length;n++){const a=o[n];a.bias=I(a.bias,T(-1,1),i),a.weight=I(a.weight,T(-1,1),i)}}}}const u=class{constructor(t={}){this.faction=F(0,p-1),this.label=this.faction+"",this.x=0,this.y=0,this.vx=0,this.vy=0,this.a=0,this.va=0,this.s=0,this.focused=!1,this.dead=!1,this.others=[],this.energy=100,this.atk=0,this.vatk=0,this.brain=new M(u.MAX_NB*2,3,[5]),Object.assign(this,t)}forward(){this.vx+=Math.cos(this.a)*.1,this.vy+=Math.sin(this.a)*.1,this.brain.score-=.01}turnLeft(){this.va-=.01}turnRight(){this.va+=.01}get radius(){return u.RADIUS+this.energy/10}update(){this.s*=.99,this.va*=.7,this.vx*=.9,this.vy*=.9,this.vatk*=.9,this.atk=(this.atk+this.vatk)*.7,!this.dead&&(this.energy-=this.s/50,this.energy-=this.va/100,this.x+=this.vx,this.y+=this.vy,this.a+=this.va,this.a>Math.PI&&(this.a-=Math.PI*2),this.a<-Math.PI&&(this.a+=Math.PI*2),this.brain.score<-25&&(this.dead=!0))}updateTargets(t){if(this.others=[],!this.dead){for(let i=0;i<t.length;i++){const s=t[i];if(s.dead||s.faction===this.faction)continue;const o=_(this.x-s.x,this.y-s.y);let n=0;const a=m(this.faction,1)===s.faction,r=m(this.faction,-1)===s.faction;a&&n--,r&&n++,o<this.radius+s.radius&&(m(this.faction,1)===s.faction&&(this.dead=!0,this.brain.score-=25),m(this.faction,-1)===s.faction&&(s.dead=!0,this.brain.score+=25)),this.others.push({ref:s,distance:o,opportunity:n})}this.others.sort((i,s)=>i.distance-s.distance)}}draw(t){this.focused&&this.drawRelations(t),this.drawBody(t),this.drawScore(t)}drawBody(t){const i=(this.focused,1),s=m(this.faction,-1);t.lineWidth=1,t.strokeStyle=`hsla(${S[s]}, 100%, 70%, ${i})`,t.fillStyle=`hsla(${S[this.faction]}, 100%, 70%, ${i})`,t.save(),t.translate(this.x,this.y),t.rotate(this.a),t.beginPath(),t.moveTo(0,0),t.arc(0,0,this.radius,0,Math.PI*2),t.lineTo(0,0),t.stroke(),t.fill(),t.beginPath(),t.strokeStyle=`hsla(${S[s]}, 100%, 80%, ${i})`,t.fillStyle=`hsla(${S[s]}, 100%, 20%, ${i})`,t.lineTo(0,0),t.lineTo(this.radius+5,0),t.stroke(),t.fill(),t.restore()}drawRelations(t){t.setLineDash([3,3]),t.lineWidth=2,this.others.slice(0,u.TRACK_NB).forEach((i,s)=>{const o=1/(1+s);t.beginPath(),t.strokeStyle=i.opportunity>0?`rgba(0, 255, 0, ${o})`:`rgba(255, 128, 0, ${o})`,t.moveTo(this.x,this.y),t.lineTo(i.ref.x,i.ref.y),t.stroke()}),t.setLineDash([])}drawScore(t){t.fillStyle="white",t.textAlign="center",t.textBaseline="middle";const i=this.y>u.RADIUS*5?this.y-u.RADIUS*2:this.y+u.RADIUS*2;this.focused&&t.fillText(`${this.label} ${this.brain.score.toFixed()}`,this.x,i)}};let w=u;w.TRACK_NB=10;w.RADIUS=15;w.MAX_NB=u.TRACK_NB*5;const C=async()=>{new R;const t=O(),i=t.getContext("2d");if(!i)throw new Error("no 2d context");const s=t.width=window.innerWidth,o=t.height=window.innerHeight,n=new B;let a=[],r=a[0];const l=new w;l.brain.loadFromFile("top");let h=l.brain.score||0;n.play((f,y)=>{t.width=window.innerWidth,t.height=window.innerHeight;const v=new Array(p).fill(0);a.forEach((e,c)=>{v[e.faction]++,g(e),e.update(),e.x>s&&(e.x=0),e.x<0&&(e.x=s),e.y>o&&(e.y=0),e.y<0&&(e.y=o)}),v.forEach((e,c)=>{if(e<w.MAX_NB){const d=a.find(P=>P.faction===c),N=(d==null?void 0:d.x)||F(0,s),$=(d==null?void 0:d.y)||F(0,o),k=(d==null?void 0:d.a)||T(-Math.PI,Math.PI),b=new w({x:N,y:$,a:k,energy:100,faction:c});b.brain.loadFromFile("top"),b.brain.mutationAmount=e/w.MAX_NB/(1+h)*500,b.brain.randomize(),b.brain.score=0,a.push(b)}});const A=a.concat().sort((e,c)=>c.brain.score-e.brain.score);if(A[0].focused=!0,a.forEach(e=>e.updateTargets(a)),a.forEach(e=>e.draw(i)),a=a.filter(e=>!e.dead),r=A[0],r&&r.brain.score>h){const e=r.brain.score;console.log(`New score: ${h} > ${e.toFixed()} (+${(e-h).toFixed(3)})`),h=e,r.brain.saveToFile("top")}});function g(f){const y=[];f.others.forEach(c=>{y.push(c.distance),y.push(c.opportunity)});const[v,A,e]=f.brain.feedForward(y);v&&f.forward(),A&&f.turnLeft(),e&&f.turnRight()}};export{C as default};
