class a{constructor(t=new Map,s=!0){this.aliases=t,this.debug=s,this.inputs=new Map,this.strokes=new Map,document.addEventListener("keydown",o.bind(this)),document.addEventListener("keyup",u.bind(this)),document.addEventListener("keypress",d.bind(this)),document.addEventListener("mousedown",o.bind(this)),document.addEventListener("mouseup",u.bind(this)),document.addEventListener("mouseclick",d.bind(this)),document.addEventListener("contextmenu",n=>n.preventDefault())}get(t){const s=this.aliases.get(t)||t;return this.inputs.get(s)||0}set(t,s,n=!1){const i=this.aliases.get(t)||t;n&&this.strokes.set(i,s),this.debug&&console.log(i,s),this.inputs.set(i,s)}once(t){const s=this.aliases.get(t)||t,n=this.inputs.get(s);return n&&this.inputs.delete(s),Boolean(n)}}function o(e){e.preventDefault();const t=e instanceof MouseEvent?`Mouse${e.button}`:e.code;this.set(t,1)}function u(e){e.preventDefault();const t=e instanceof MouseEvent?`Mouse${e.button}`:e.code;this.set(t,0)}function d(e){e.preventDefault();const t=e instanceof MouseEvent?`Mouse${e.button}`:e.code;this.set(t,1,!0)}export{a as GamePad};
